// Mocks generated by Mockito 5.4.4 from annotations
// in variety_testing_app/test/data_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:variety_testing_app/models/data_set.dart' as _i6;
import 'package:variety_testing_app/state/csv_manager.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CSVManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockCSVManager extends _i1.Mock implements _i3.CSVManager {
  MockCSVManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get httpClient => (super.noSuchMethod(
        Invocation.getter(#httpClient),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#httpClient),
        ),
      ) as _i2.Client);

  @override
  set httpClient(_i2.Client? _httpClient) => super.noSuchMethod(
        Invocation.setter(
          #httpClient,
          _httpClient,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<String> get indexFileRows => (super.noSuchMethod(
        Invocation.getter(#indexFileRows),
        returnValue: <String>[],
      ) as List<String>);

  @override
  set indexFileRows(List<String>? _indexFileRows) => super.noSuchMethod(
        Invocation.setter(
          #indexFileRows,
          _indexFileRows,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<List<String>> get csvRows => (super.noSuchMethod(
        Invocation.getter(#csvRows),
        returnValue: <List<String>>[],
      ) as List<List<String>>);

  @override
  set csvRows(List<List<String>>? _csvRows) => super.noSuchMethod(
        Invocation.setter(
          #csvRows,
          _csvRows,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<List<String>> getIndexFileData() => (super.noSuchMethod(
        Invocation.method(
          #getIndexFileData,
          [],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);

  @override
  String getLastUpdated() => (super.noSuchMethod(
        Invocation.method(
          #getLastUpdated,
          [],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #getLastUpdated,
            [],
          ),
        ),
      ) as String);

  @override
  String getDataYear() => (super.noSuchMethod(
        Invocation.method(
          #getDataYear,
          [],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #getDataYear,
            [],
          ),
        ),
      ) as String);

  @override
  _i4.Future<List<_i6.DataSet>> parseDataSets() => (super.noSuchMethod(
        Invocation.method(
          #parseDataSets,
          [],
        ),
        returnValue: _i4.Future<List<_i6.DataSet>>.value(<_i6.DataSet>[]),
      ) as _i4.Future<List<_i6.DataSet>>);

  @override
  _i4.Future<String> fetchCSV(String? url) => (super.noSuchMethod(
        Invocation.method(
          #fetchCSV,
          [url],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #fetchCSV,
            [url],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  List<_i6.DataSet> parseCSVData(List<List<String>>? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #parseCSVData,
          [data],
        ),
        returnValue: <_i6.DataSet>[],
      ) as List<_i6.DataSet>);

  @override
  _i6.DataSet? parseSingleDataSet({
    required int? order,
    required List<String>? dataRows,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #parseSingleDataSet,
        [],
        {
          #order: order,
          #dataRows: dataRows,
        },
      )) as _i6.DataSet?);

  @override
  List<String> getCellValues(String? row) => (super.noSuchMethod(
        Invocation.method(
          #getCellValues,
          [row],
        ),
        returnValue: <String>[],
      ) as List<String>);
}
